// === Accordion toggle logic (multiple open allowed) ===
document.querySelectorAll(".accordion-toggle").forEach(btn => {
  btn.addEventListener("click", () => {
    const section = btn.dataset.section;
    const content = document.querySelector(`.accordion-content[data-section="${section}"]`);

    const isOpen = content.style.display === "block";
    
    // Toggle only this one, don’t touch others
    if (isOpen) {
      content.style.display = "none";
      btn.querySelector(".arrow").textContent = "▼";
    } else {
      content.style.display = "block";
      btn.querySelector(".arrow").textContent = "▲";
    }
  });
});


<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>XML Modal Example</title>
  <link rel="stylesheet" href="style.css">
</head>
<body>
  <button id="openModalBtn">Open Import Request Modal</button>

  <!-- Modal -->
  <div id="xmlModal" class="modal-overlay" style="display:none;">
    <div class="modal-container">
      <div class="modal-header">
        <h2>Import Request</h2>
        <button id="closeModalBtn" class="close-btn">✕</button>
      </div>
      <div class="modal-body">
        <!-- Client Details -->
        <button class="accordion-toggle" data-section="client">Client Details ▼</button>
        <div class="accordion-content" data-section="client">
          <label>Client ID</label><input name="clientId" value="CO1CID012563">
          <label>Name</label><input name="name">
          <label>Address</label><input name="address">
          <label>City</label><input name="city">
          <label>Province</label><input name="province">
          <label>Post Code</label><input name="postCode">
          <label>Country</label><input name="country">
          <label>Template Name</label><input name="templateName">
          <label>User Assigned Login Enabled</label><input name="userAssignedLoginIdEnabled" value="true">
        </div>

        <!-- Auto Debit -->
        <button class="accordion-toggle" data-section="auto">Auto Debit Details ▼</button>
        <div class="accordion-content" data-section="auto">
          <label>Account Number</label><input name="accountNumber">
          <label>Branch Code</label><input name="branchCode">
          <label>Account Holder Name</label><input name="accountHolderName">
          <label>Account Holder Local Name</label><input name="accountHolderLocalName">
          <label>Account Currency</label><input name="accountCurrency">
          <label>Default Account</label><input name="defaultAccount">
        </div>

        <!-- User -->
        <button class="accordion-toggle" data-section="user">User Details ▼</button>
        <div class="accordion-content" data-section="user">
          <label>User ID</label><input name="userId" value="CO1UID01235673">
          <label>Application ID</label><input name="applicationId" value="APP-ID">
          <label>Email</label><input name="email">
          <label>First Name</label><input name="firstName">
          <label>Last Name</label><input name="lastName">
          <label>User Template Name</label><input name="userTemplateName">
          <label>Login ID</label><input name="loginId">
          <label>External ID</label><input name="externalId">
          <label>SSO Disabled</label><input name="ssoDisabled" value="false">
        </div>
      </div>
      <div class="modal-footer">
        <button id="submitBtn" class="submit-btn">Submit</button>
      </div>
    </div>
  </div>

  <script src="main.js"></script>
</body>
</html>


// === Reset modal to fresh state ===
function resetModal() {
  // Clear inputs
  document.querySelectorAll("#xmlModal input").forEach(i => i.value = "");

  // Close all accordion contents
  document.querySelectorAll(".accordion-content").forEach(c => c.style.display = "none");

  // Reset arrows
  document.querySelectorAll(".accordion-toggle span.arrow").forEach(a => a.textContent = "▼");

  // Close modal
  modal.style.display = "none";
}

CSS
====
/* === Modal Overlay (background dim) === */
.modal-overlay {
  position: fixed;
  inset: 0; /* shorthand for top/right/bottom/left:0 */
  display: flex;
  justify-content: center;
  align-items: center;
  background: rgba(0, 0, 0, 0.5);
  z-index: 1000;
}

/* === Modal Box === */
.modal-container {
  background: #fff;
  padding: 20px;
  border-radius: 10px;
  width: 600px;
  max-width: 95%; /* mobile safe */
  max-height: 90vh;
  overflow-y: auto;
  box-shadow: 0 5px 20px rgba(0,0,0,0.3);
  animation: fadeIn 0.2s ease-in-out;
}

/* Fade-in effect */
@keyframes fadeIn {
  from { opacity: 0; transform: translateY(-20px); }
  to { opacity: 1; transform: translateY(0); }
}

/* === Modal Header === */
.modal-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  border-bottom: 2px solid #eee;
  padding-bottom: 8px;
  margin-bottom: 15px;
}
.modal-header h2 {
  margin: 0;
  font-size: 20px;
  font-weight: bold;
  color: #333;
}
.close-btn {
  background: transparent;
  border: none;
  font-size: 22px;
  cursor: pointer;
  color: #666;
}
.close-btn:hover {
  color: #000;
}

/* === Accordion Toggle Button === */
.accordion-toggle {
  width: 100%;
  padding: 12px 14px;
  margin-top: 12px;
  cursor: pointer;
  display: flex;                 /* flex to separate text & icon */
  justify-content: space-between;/* push arrow to right */
  align-items: center;           /* vertical centering */
  border: 1px solid #ccc;
  border-radius: 6px;
  background: #f9f9f9;
  font-weight: 600;
  font-size: 15px;
  transition: background 0.2s;
}
.accordion-toggle:hover {
  background: #f1f1f1;
}

/* === Accordion Content === */
.accordion-content {
  display: none;
  margin: 10px 0;
  padding: 12px;
  border: 1px solid #ddd;
  border-radius: 6px;
  background: #fafafa;
  animation: slideDown 0.3s ease-in-out;
}

/* Smooth dropdown animation */
@keyframes slideDown {
  from { opacity: 0; transform: translateY(-10px); }
  to { opacity: 1; transform: translateY(0); }
}

/* === Form Labels & Inputs === */
.accordion-content label {
  display: block;
  margin: 6px 0 2px;
  font-size: 14px;
  font-weight: 500;
  color: #444;
}
.accordion-content input {
  width: 100%;
  padding: 8px;
  margin-bottom: 12px;
  border: 1px solid #ccc;
  border-radius: 4px;
  font-size: 14px;
  box-sizing: border-box;
  transition: border 0.2s, box-shadow 0.2s;
}
.accordion-content input:focus {
  border-color: #007bff;
  outline: none;
  box-shadow: 0 0 4px rgba(0,123,255,0.4);
}

/* === Modal Footer === */
.modal-footer {
  margin-top: 15px;
  text-align: right;
  border-top: 1px solid #eee;
  padding-top: 12px;
}
.submit-btn {
  background: #007bff;
  color: #fff;
  border: none;
  padding: 10px 18px;
  border-radius: 6px;
  cursor: pointer;
  font-size: 15px;
  font-weight: 600;
  transition: background 0.2s;
}
.submit-btn:hover {
  background: #0056b3;
}

/* === Responsive for small screens === */
@media (max-width: 480px) {
  .modal-container {
    width: 95%;
    padding: 15px;
  }
  .accordion-toggle {
    font-size: 14px;
    padding: 10px;
  }
  .accordion-content input {
    font-size: 13px;
    padding: 6px;
  }
  .submit-btn {
    width: 100%; /* full width button on mobile */
  }
}




function xmlEscape(v = "") {
  return String(v)
    .replace(/&/g, "&amp;")
    .replace(/</g, "&lt;")
    .replace(/>/g, "&gt;")
    .replace(/"/g, "&quot;")
    .replace(/'/g, "&apos;");
}
function tagIf(name, val) {
  return val && String(val).trim() !== "" ? `<${name}>${xmlEscape(val)}</${name}>` : "";
}
function generateXml(data) {
  const clientTags = [
    tagIf("name", data.name),
    tagIf("address", data.address),
    tagIf("city", data.city),
    tagIf("province", data.province),
    tagIf("postCode", data.postCode),
    tagIf("country", data.country),
    tagIf("templateName", data.templateName),
    tagIf("userAssignedLoginIdEnabled", data.userAssignedLoginIdEnabled),
  ].filter(Boolean).join("");

  const autoDebitTags = [
    tagIf("accountNumber", data.accountNumber),
    tagIf("branchCode", data.branchCode),
    tagIf("accountHolderName", data.accountHolderName),
    tagIf("accountHolderLocalName", data.accountHolderLocalName),
    tagIf("accountCurrency", data.accountCurrency),
    tagIf("defaultAccount", data.defaultAccount),
  ].filter(Boolean).join("");

  const userTags = [
    tagIf("applicationId", data.applicationId),
    tagIf("email", data.email),
    tagIf("firstName", data.firstName),
    tagIf("lastName", data.lastName),
    tagIf("templateName", data.userTemplateName),
    tagIf("loginId", data.loginId),
    tagIf("externalId", data.externalId),
    tagIf("ssoDisabled", data.ssoDisabled),
  ].filter(Boolean).join("");

  return `<?xml version="1.0" encoding="UTF-8" standalone="yes"?>` +
    `<ns:importRequest xmlns:ns="http://www.westernunionbusiness.com/geo/cma">` +
      `<client id="${xmlEscape(data.clientId)}">` +
        clientTags +
        (autoDebitTags ? `<autoDebitAccount>${autoDebitTags}</autoDebitAccount>` : "") +
        (userTags ? `<user id="${xmlEscape(data.userId)}">${userTags}</user>` : "") +
      `</client>` +
    `</ns:importRequest>`;
}

// Modal controls
const modal = document.getElementById("xmlModal");
document.getElementById("openModalBtn").onclick = () => modal.style.display = "flex";
document.getElementById("closeModalBtn").onclick = () => modal.style.display = "none";

// Accordion toggle
document.querySelectorAll(".accordion-toggle").forEach(btn => {
  btn.addEventListener("click", () => {
    const section = btn.dataset.section;
    const content = document.querySelector(`.accordion-content[data-section="${section}"]`);
    content.style.display = content.style.display === "block" ? "none" : "block";
  });
});

// Submit
document.getElementById("submitBtn").onclick = () => {
  const inputs = document.querySelectorAll("#xmlModal input");
  const data = {};
  inputs.forEach(i => data[i.name] = i.value);
  const xml = generateXml(data);
  console.log("XML payload →", xml);
  alert("XML Generated! Check console.");
  modal.style.display = "none";
};




