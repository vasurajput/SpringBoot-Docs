WITH possible_relationships AS (
    SELECT 
        c1.table_name AS table1,
        c1.column_name AS column1,
        c2.table_name AS table2,
        c2.column_name AS column2,
        c1.data_type AS column1_type,
        c2.data_type AS column2_type
    FROM information_schema.columns c1
    JOIN information_schema.columns c2 
        ON c1.column_name = c2.column_name  -- Same column name
        AND c1.table_name <> c2.table_name  -- Different tables
    WHERE c1.table_name IN ('table1', 'table2', 'table3')  -- Specify tables to check
      AND c2.table_name IN ('table1', 'table2', 'table3')
)
SELECT 
    pr.*,
    (SELECT COUNT(*) 
     FROM (SELECT DISTINCT t1.* FROM table1 t1 JOIN table2 t2 
           ON t1.column1::TEXT = t2.column2::TEXT LIMIT 10) sub) AS match_count
FROM possible_relationships pr
ORDER BY match_count DESC;



SELECT 
    c.table_name,
    c.column_name,
    c.table_schema,
    ARRAY_AGG(DISTINCT t.table_name) AS related_tables
FROM information_schema.columns c
JOIN information_schema.columns t
    ON c.column_name = t.column_name
    AND c.table_name != t.table_name
WHERE c.table_name IN ('table1', 'table2', 'table3')  -- Specify your table names here
AND c.table_schema = 'public'
GROUP BY c.table_name, c.column_name, c.table_schema
ORDER BY c.column_name;



SELECT table_schema, table_name, column_name
FROM information_schema.columns
WHERE column_name SIMILAR TO '%(substring1|substring2|substring3)%'
AND table_schema = 'public';

SELECT 
    table_schema, 
    table_name, 
    column_name, 
    data_type, 
    COALESCE(character_maximum_length::TEXT, numeric_precision::TEXT, '') AS length
FROM information_schema.columns
WHERE column_name SIMILAR TO '%(substring1|substring2|substring3)%'
AND table_schema = 'public';




SELECT 
    pk.table_name AS parent_table,
    pk.column_name AS parent_column,
    pk.data_type AS parent_data_type,
    fk.table_name AS child_table,
    fk.column_name AS child_column,
    fk.data_type AS child_data_type
FROM (
    SELECT 
        c.oid AS table_oid, 
        c.relname AS table_name, 
        a.attname AS column_name, 
        format_type(a.atttypid, a.atttypmod) AS data_type
    FROM pg_class c
    JOIN pg_namespace n ON n.oid = c.relnamespace
    JOIN pg_attribute a ON a.attrelid = c.oid
    JOIN pg_index i ON i.indrelid = c.oid AND i.indisprimary
    WHERE n.nspname = 'public' -- Change schema if needed
) pk
JOIN (
    SELECT 
        c.oid AS table_oid, 
        c.relname AS table_name, 
        a.attname AS column_name, 
        format_type(a.atttypid, a.atttypmod) AS data_type, 
        con.conrelid,
        con.confrelid
    FROM pg_constraint con
    JOIN pg_class c ON c.oid = con.conrelid
    JOIN pg_namespace n ON n.oid = c.relnamespace
    JOIN pg_attribute a ON a.attrelid = con.conrelid AND a.attnum = ANY(con.conkey)
    WHERE con.contype = 'f'
) fk ON pk.table_oid = fk.confrelid
AND pk.column_name = fk.column_name
WHERE pk.data_type <> fk.data_type;

##############

SELECT
    pk.table_schema AS parent_schema,
    pk.table_name AS parent_table,
    pk.column_name AS parent_column,
    pk.data_type AS parent_data_type,
    fk.table_schema AS child_schema,
    fk.table_name AS child_table,
    fk.column_name AS child_column,
    fk.data_type AS child_data_type
FROM (
    -- Get primary key columns with their data types
    SELECT
        tc.table_schema,
        tc.table_name,
        kcu.column_name,
        c.data_type
    FROM information_schema.table_constraints AS tc
    JOIN information_schema.key_column_usage AS kcu
        ON tc.constraint_name = kcu.constraint_name
        AND tc.table_schema = kcu.table_schema
    JOIN information_schema.columns AS c
        ON kcu.table_schema = c.table_schema
        AND kcu.table_name = c.table_name
        AND kcu.column_name = c.column_name
    WHERE tc.constraint_type = 'PRIMARY KEY'
) pk
JOIN (
    -- Get foreign key columns with their data types
    SELECT
        tc.table_schema,
        tc.table_name,
        kcu.column_name,
        c.data_type,
        rc.unique_constraint_schema,
        rc.unique_constraint_name
    FROM information_schema.table_constraints AS tc
    JOIN information_schema.key_column_usage AS kcu
        ON tc.constraint_name = kcu.constraint_name
        AND tc.table_schema = kcu.table_schema
    JOIN information_schema.columns AS c
        ON kcu.table_schema = c.table_schema
        AND kcu.table_name = c.table_name
        AND kcu.column_name = c.column_name
    JOIN information_schema.referential_constraints AS rc
        ON tc.constraint_name = rc.constraint_name
        AND tc.table_schema = rc.constraint_schema
    WHERE tc.constraint_type = 'FOREIGN KEY'
) fk ON pk.table_schema = fk.unique_constraint_schema
AND pk.table_name = fk.table_name
AND pk.column_name = fk.column_name
WHERE pk.data_type <> fk.data_type;

#######################
SELECT
    pk.table_schema AS parent_schema,
    pk.table_name AS parent_table,
    pk.column_name AS parent_column,
    pk.data_type AS parent_data_type,
    fk.table_schema AS child_schema,
    fk.table_name AS child_table,
    fk.column_name AS child_column,
    fk.data_type AS child_data_type
FROM (
    -- Get primary key columns with their data types
    SELECT
        tc.table_schema,
        tc.table_name,
        kcu.column_name,
        c.data_type
    FROM information_schema.table_constraints AS tc
    JOIN information_schema.key_column_usage AS kcu
        ON tc.constraint_name = kcu.constraint_name
        AND tc.table_schema = kcu.table_schema
    JOIN information_schema.columns AS c
        ON kcu.table_schema = c.table_schema
        AND kcu.table_name = c.table_name
        AND kcu.column_name = c.column_name
    WHERE tc.constraint_type = 'PRIMARY KEY'
        AND tc.table_schema = 'your_schema'  -- Change schema name
) pk
JOIN (
    -- Get foreign key columns with their data types
    SELECT
        tc.table_schema,
        tc.table_name,
        kcu.column_name,
        c.data_type,
        rc.unique_constraint_schema,
        rc.unique_constraint_name
    FROM information_schema.table_constraints AS tc
    JOIN information_schema.key_column_usage AS kcu
        ON tc.constraint_name = kcu.constraint_name
        AND tc.table_schema = kcu.table_schema
    JOIN information_schema.columns AS c
        ON kcu.table_schema = c.table_schema
        AND kcu.table_name = c.table_name
        AND kcu.column_name = c.column_name
    JOIN information_schema.referential_constraints AS rc
        ON tc.constraint_name = rc.constraint_name
        AND tc.table_schema = rc.constraint_schema
    WHERE tc.constraint_type = 'FOREIGN KEY'
        AND tc.table_schema = 'your_schema'  -- Change schema name
) fk ON pk.table_schema = fk.unique_constraint_schema
AND pk.table_name = fk.table_name
AND pk.column_name = fk.column_name
WHERE pk.data_type <> fk.data_type;

##################
WITH pk_columns AS (
    SELECT 
        c.oid AS table_oid,
        c.relname AS table_name,
        n.nspname AS schema_name,
        a.attname AS column_name,
        format_type(a.atttypid, a.atttypmod) AS data_type
    FROM pg_class c
    JOIN pg_namespace n ON n.oid = c.relnamespace
    JOIN pg_index i ON i.indrelid = c.oid AND i.indisprimary
    JOIN pg_attribute a ON a.attrelid = c.oid AND a.attnum = ANY(i.indkey)
    WHERE n.nspname = 'your_schema'  -- Change schema
), fk_columns AS (
    SELECT 
        confnsp.nspname AS parent_schema,
        confrel.relname AS parent_table,
        confatt.attname AS parent_column,
        format_type(confatt.atttypid, confatt.atttypmod) AS parent_data_type,
        conrel.relname AS child_table,
        conatt.attname AS child_column,
        format_type(conatt.atttypid, conatt.atttypmod) AS child_data_type
    FROM pg_constraint con
    JOIN pg_class confrel ON con.confrelid = confrel.oid
    JOIN pg_class conrel ON con.conrelid = conrel.oid
    JOIN pg_namespace confnsp ON confrel.relnamespace = confnsp.oid
    JOIN pg_namespace connsp ON conrel.relnamespace = connsp.oid
    JOIN pg_attribute confatt ON confatt.attrelid = confrel.oid AND confatt.attnum = ANY(con.confkey)
    JOIN pg_attribute conatt ON conatt.attrelid = conrel.oid AND conatt.attnum = ANY(con.conkey)
    WHERE con.contype = 'f' AND confnsp.nspname = 'your_schema'  -- Change schema
)
SELECT 
    fk.parent_schema,
    fk.parent_table,
    fk.parent_column,
    fk.parent_data_type,
    fk.child_table,
    fk.child_column,
    fk.child_data_type
FROM fk_columns fk
JOIN pk_columns pk 
    ON fk.parent_schema = pk.schema_name 
    AND fk.parent_table = pk.table_name 
    AND fk.parent_column = pk.column_name
WHERE fk.parent_data_type <> fk.child_data_type;



################
SELECT
    conrelid::regclass AS table_name,
    att1.attname AS column_name,
    format_type(att1.atttypid, att1.atttypmod) AS column_type,
    confrelid::regclass AS referenced_table,
    att2.attname AS referenced_column,
    format_type(att2.atttypid, att2.atttypmod) AS referenced_column_type
FROM
    pg_constraint AS con
JOIN
    pg_attribute AS att1 ON att1.attnum = con.conkey[1] AND att1.attrelid = con.conrelid
JOIN
    pg_attribute AS att2 ON att2.attnum = con.confkey[1] AND att2.attrelid = con.confrelid
WHERE
    con.contype = 'f'
    AND att1.atttypid <> att2.atttypid
    AND con.connamespace = 'your_schema'::regnamespace;



############ Stored Function

create function testFun(s varchar(255))
returns varchar(255)
 begin
  return concat('Hello','s','!');
 end

Run-> select testFun('vasu');

###### To Drop Function if already Exist
drop function if exists testFun;

#### To Drop Procedure if already Exist
drop procedure if exists testProc

############ Stored Procedure

create procedure testProc(n varchar(24))
 begin
   select concat('hello, ', n , '!');
 end

Run- > Call testProc('vasu');

Ex:
create procedure vasu(param varchar(30))
 begin
   select a.artist as artist,
   a.title as album
   t.trackNo as trackNo
   from track as t
   join album as a
    on a.id=t.albumId
   where a.artist like param
   order by artist, album, trackNo
 end

call vasu('%Lets Nacho%')


######### Procedure with return
create procedure totalDuration(param varchar(20), OUT outp varchar(30))
  begin
   select trackLen(SUM(duration)) into outp
   from track
   where albumId in (Select id from album where artist like param);
  end

call totalDuration('%vasu%', @dur);
select @dur;




######## To See all the Function and Procedure List ############
show procedure status where definer like 'vasu%';
show function status where definer like 'vasu%';


########## To See Index detail on a table use below command ######
show index from table_name;

########## To create index explicitly on a table column use below command #########
create table test(
  id int unsigned not null auto_increment primary key,
  string1 varchar(20) unique,
  string2 varchar(20),
  index i_str2 (string2)    or you can use unique index i_str2 (string2)
);
show index from test;

######### To Create Index Seperately from Table ##############
create index i_str2 on test(string2);
        OR to create unique index
create unique index i_str2 on test(string2)

