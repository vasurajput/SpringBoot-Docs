                               ################ Feign Clinet #################
                               
use below dependency in pom.xml file
======================================

    <dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-feign</artifactId>
			<version>1.4.7.RELEASE</version>
		</dependency>
    
                        ####### Steps on 1st Project ######
========================================================
1- use @EnableFeignClients annotation on your main class
=========================================================

@EnableEurekaClient
@SpringBootApplication
@EnableFeignClients("com.example.demo")
public class C1Application {

	public static void main(String[] args) {
		SpringApplication.run(C1Application.class, args);
	}

}

======================================================
2- Create an Interface and use @FeignClient annotation
======================================================

@FeignClient(name = "c2", url = "http://localhost:8082/")
public interface RandomServiceProxy {
	@GetMapping("client2")
	public String test();	
}

Note: => Here C2 is the name of Project2  spring.application.name value and we hardcode the URL here
=>@GetMapping("client2") is the URL used in 2nd Project

====================================================
3- Use This interface to call another MicroService
====================================================

@RestController
public class Ccontroller {
	@Autowired
	private RandomServiceProxy proxy;

	@GetMapping("/testFeign")
	public String testFeignClient() {
		String testFeign = proxy.test();
		System.out.println("testFeign= "+testFeign);
		return testFeign;
	}
}


                ########### Steps on Project2 ########
1- Create a Controller class
=============================
@RestController
public class Ccontroller {
	@GetMapping("client2")
	public String test() {
		return "C2 eureka service";
	}
}

===========================
2- application.properties
===========================
spring.application.name=c2
server.port=8082
eureka.client.service-url.default-zone=http://localhost:8761/eureka


    ####################################### Client Side Load Balancing (Ribbon) ##############################
 
 1- Add below dependency in your pom.xml file
 
               <dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-ribbon</artifactId>
			<version>1.4.6.RELEASE</version>
		</dependency>

2- Enable ribbon using annotation in you Feign Proxy interface

@FeignClient(name = "c2")
@RibbonClient(name = "c2")
public interface RandomServiceProxy {

	@GetMapping("client2")
	public String test();
}

NOTE:   While Using @RibbonClient we don't use {url=""} Property with @FeignClient annotation. we define list of all servers
           in application.properties file

======================
3- application.properties
======================
spring.application.name=c1
server.port=8081
eureka.client.service-url.default-zone=http://localhost:8761/eureka
c2.ribbon.listOfServers=http://localhost:8082,http://localhost:8084

where c2 is the name of service whose two instances are running on 8082,8084 Port.


     ##################################### API Gateway #############################################
============================================
1- Add below dependency in your pom.xml file
============================================

               <dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-zuul</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
		</dependency>

======================================
2- Enable ZullProxy in your main class
======================================

@EnableZuulProxy
@EnableDiscoveryClient
@SpringBootApplication
public class ApiGatewayApplication {

	public static void main(String[] args) {
		SpringApplication.run(ApiGatewayApplication.class, args);
	}

}

========================================
3- Create a class and extends zullFilter
========================================

@Component
public class ZullLoggingFilter extends ZuulFilter {

	private static final Logger logger = LoggerFactory.getLogger(ZullLoggingFilter.class);

	@Override
	public boolean shouldFilter() {

		return true;
	}

	@Override
	public Object run() throws ZuulException {
		HttpServletRequest request = RequestContext.getCurrentContext().getRequest();
		logger.info("vvv::  request= " + request);
		logger.info("vvv::  request URI= " + request.getRequestURI());
		return null;
	}

	@Override
	public String filterType() {

		return "pre";
	}

	@Override
	public int filterOrder() {

		return 1;
	}

}

========================
4- Run the Application
=========================
Invoke Url Using below Syntax:

http://localhost:8765/{application-name}/{endPoint}
Eg:=> http://localhost:8765/c1/testFeign

Note: There are some property For Api gateway that you can use in application.properties
====
zuul.routes.employeeUI.serviceId=DASHBOARD-SERVICE
zuul.host.socket-timeout-millis=30000

Suppose i have a MiceroService A and there is a endPoiint http://localhost:8080/dashboard
So when i hit api using API Gateway and any request come with prefix employeeUI then it will redirect to MicroService A
Eg=
http://localhost:8080/dashboard      is same as    http://localhost:8084/employeeUI/dashboard

Link To Study Above Topic =>  https://dzone.com/articles/microservices-communication-zuul-api-gateway-1



################################ RestTemplaet In Spring Boot ##################################
We can't Autowired RestTemplate Directly in Spring Boot , To Autowired RestTemplate first we have to create a Ben for 
RestTemplate using @Bean

Eg:
@Configuration
public class Config {

	@Bean
	public RestTemplate template() {
		HttpComponentsClientHttpRequestFactory httpRequestFactory = new HttpComponentsClientHttpRequestFactory();
                httpRequestFactory.setConnectionRequestTimeout(4000);
                httpRequestFactory.setConnectTimeout(4000);
                httpRequestFactory.setReadTimeout(4000);
		return new RestTemplate(httpRequestFactory);
	}
}

@Autowired
Private RestTemplate restTemplate;

Post Using RestTemplate:
=======================
             private ResponseEntity<String> postURLData(String URL, String params, Long no) {
                        HttpHeaders headers = new HttpHeaders();
			headers.setContentType(MediaType.APPLICATION_JSON);
			org.springframework.http.HttpEntity<String> s = new org.springframework.http.HttpEntity<String>(params,headers);
			ResponseEntity<String> postResponse = restTemplate.postForEntity(URL, s, String.class);
			}
Delete Using RestTemplate:
=========================
                        HttpHeaders headers = new HttpHeaders();
			headers.setContentType(MediaType.APPLICATION_JSON);
			org.springframework.http.HttpEntity<String> s = new org.springframework.http.HttpEntity<String>(params,headers);
			ResponseEntity<String> deleteResponse = restTemplate.exchange(URL, HttpMethod.DELETE, s, String.class);
			
Get Usign RestTemplate:
=======================
                        String response = restTemplate.getForObject(url, String.class);
			
Make Array As Params:-> eg: [8477013437]
===================
private String getJsonArrayString(Long value)
	{
		Gson gson = new Gson();
		JsonArray jsonArray = new JsonArray();
		jsonArray.add(new JsonPrimitive(value));
		return gson.toJson(jsonArray);
	}

###################################   RestTemplate END #######################################################



#################################### Communication bw MicroServices using API Gateway ################################
1- give name of @FeignClient in proxy class to your API Gateway
2- give complete URL to your method in proxy class Eg:=> serviceName/endPoint

@FeignClient(name = "API-GATEWAY")      //Name of API-Gateway
@RibbonClient(name = "c2")
public interface RandomServiceProxy {
	@GetMapping("c2/client2")
	public String test();
}


#################################  Zipkin Server ############################################################

1- Add the below dependency in pom.xml file

	<!-- https://mvnrepository.com/artifact/io.zipkin.java/zipkin-server -->
		<dependency>
			<groupId>io.zipkin.java</groupId>
			<artifactId>zipkin-server</artifactId>
			<version>2.12.8</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/io.zipkin.java/zipkin-autoconfigure-ui -->
		<dependency>
			<groupId>io.zipkin.java</groupId>
			<artifactId>zipkin-autoconfigure-ui</artifactId>
			<version>2.12.8</version>
		</dependency>
		
2- Enable Zipkini server in your main class

@EnableZipkinServer
@SpringBootApplication
public class Z1Application extends SpringBootServletInitializer{
	public static void main(String[] args) {
		SpringApplication.run(Z1Application.class, args);
	}
}

3- Add below properties in your properties file

spring.main.web-application-type=none
spring.application.name=zipkin-server
server.port=9411


#################################################### Hystrix ###################################################
Basically we use Hystrix to provide custom Response of any third party do not provide response in a given period of time.

1- For This we Have to include below dependency in our pom.xml file {simplly get from starter.spring.io no need of maven repo}
======================================
                <dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-hystrix</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-hystrix-dashboard</artifactId>
		</dependency>
		
2- Enable Hystrix in your main class
=====================================
@SpringBootApplication
@EnableHystrix
public class Hystrix1Application {

	public static void main(String[] args) {
		SpringApplication.run(Hystrix1Application.class, args);
	}
}

3- Define Hystix call back method for Rest Api to give custom Response
======================================================================
Description:=> Here we make a sleep of 3 second but we wait for 1 sec in our @HystrixCommand so we will get custom response after
===========    1 sec.

@RestController
public class DemoController {

	@GetMapping("/test")
	@HystrixCommand(fallbackMethod = "fallback_hello", commandProperties = {
			@HystrixProperty(name = "execution.isolation.thread.timeoutInMilliseconds", value = "1000") })
	public String test() {
		try {
			Thread.sleep(3000);
			return "Nice Try";
		} catch (Exception e) {
			e.printStackTrace();
			return "Some Error";
		}
	}
	private String fallback_hello() {
		return "Request fails. It takes long time to response";
	}
}


######################### Zuul Api Gateway ########################

1- Add the below dependency in your pom.xml file
                <dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-zuul</artifactId>
		</dependency>
		
2- Enable zull using Annotation in your main class

@EnableZuulProxy
@EnableDiscoveryClient
@SpringBootApplication
public class ZullGatewayApplication {

3- make below entry in your application.yml file

spring:
  application:
    name: API-GATEWAY

server:
  port: 8080

eureka:
  client:
    service-url:
      default-zone: ${EUREKA_URI:http://localhost:8761/eureka}
  instance:
    prefer-ip-address: true

zuul:
  ignoredServices: '*'
  prefix: /api
  routes:
    account-service:                           //Name of account appliation that written in application.yml file
       path: /accounts/**                      //Write Anything that you want
       serviceId: ACCOUNT-SERVICE              // Service Name of Account application that display on Eureka Server
    web-application:
       path: /webs/**
       serviceId: WEB-APPLICATION
  host:
    socket-timeout-millis: 30000       


4- Now Call Account Service URL using below url

http://localhost:8080/api/accounts/account

######################### Zuul Api Gateway END #############################


######################### Common Logging in Microservice and Trace Log on Zipkin Server ###################
if you want to trace log using Trace Id and Span Id then just add the below deependency in your pom.xml file

                <dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-sleuth</artifactId>
		</dependency>

if you want to Trace log in your Zipkin server Then add above dependency as well as below dependecy

               <dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-sleuth-zipkin</artifactId>
			<version>2.1.3.RELEASE</version>
		</dependency>
		
Download Zikin Server using Jar from there website and run 
To Connect To Zipkin Server use below properties in your application.properties file

spring.zipkin.base-url=http://localhost:9411/
spring.sleuth.sampler.probability=100
